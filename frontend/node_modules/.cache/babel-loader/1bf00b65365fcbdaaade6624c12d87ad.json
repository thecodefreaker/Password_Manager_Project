{"remainingRequest":"/home/kaliuser/test/vaults/frontend/node_modules/babel-loader/lib/index.js!/home/kaliuser/test/vaults/frontend/node_modules/eslint-loader/index.js??ref--14-0!/home/kaliuser/test/vaults/frontend/src/plugins/Security.js","dependencies":[{"path":"/home/kaliuser/test/vaults/frontend/src/plugins/Security.js","mtime":1713871927302},{"path":"/home/kaliuser/test/vaults/frontend/babel.config.js","mtime":1713871927298},{"path":"/home/kaliuser/test/vaults/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kaliuser/test/vaults/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/kaliuser/test/vaults/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9rYWxpdXNlci90ZXN0L3ZhdWx0cy9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL2thbGl1c2VyL3Rlc3QvdmF1bHRzL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgKiBhcyBwYmtkZjIgZnJvbSAicGJrZGYyIjsKaW1wb3J0ICogYXMgYWVzIGZyb20gImFlcy1qcyI7Ci8qKgogKiBVc2VkIHRvIGhhc2ggdGhlIG1hc3RlciBwYXNzd29yZCwgbWFrZSBhbiBlbmNyeXB0aW9uIGtleSAmIGF1dGhlbnRpY2F0aW9uIGhhc2ggb3V0IG9mIGl0LAogKiBhcyB3ZWxsIGFzIGVuY3J5cHQgJiBkZWNyeXB0IHRoZSB2YXVsdCBkYXRhIHdpdGggdGhlIGZvcm1lcmx5IGNyZWF0ZWQga2V5LgogKi8KCmV4cG9ydCB2YXIgU2VjdXJpdHkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNlY3VyaXR5KCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlY3VyaXR5KTsKICB9CgogIF9jcmVhdGVDbGFzcyhTZWN1cml0eSwgW3sKICAgIGtleTogImhhc2giLAogICAgdmFsdWU6CiAgICAvKioKICAgICAqIEFzeW5jaHJvbm91c2x5IGhhc2hlcyB0aGUgZ2l2ZW4gZGF0YSB1c2luZyBQQktERjIgYXMgYSBtZXRob2QuCiAgICAgKgogICAgICogQHBhcmFtIHBhc3N3b3JkIFRoZSBwYXNzd29yZCB0byBiZSBoYXNoZWQuCiAgICAgKiBAcGFyYW0gc2FsdCBBIHVuaXF1ZSBzYWx0IGZvciBlYWNoIHVzZXIsIHRoaXMgd2lsbCBiZSB0aGUgRS1NYWlsLgogICAgICogQHBhcmFtIGl0ZXJhdGlvbnMgSG93IG1hbnkgdGltZXMgdGhlIGhhc2ggdGFrZXMgcGxhY2VzLgogICAgICogQHJldHVybnMge1Byb21pc2U8dW5rbm93bj59CiAgICAgKi8KICAgIGZ1bmN0aW9uIGhhc2gocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMpIHsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBwYmtkZjIucGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCAzMiwgInNoYTI1NiIsIGZ1bmN0aW9uIChlcnJvciwgZW5jcnlwdGlvbktleSkgewogICAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpOwogICAgICAgICAgfQoKICAgICAgICAgIHJlc29sdmUoZW5jcnlwdGlvbktleSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBHaXZlbiBhbiBlbmNyeXB0aW9uIGtleSwgZW5jcnlwdHMgdGhlIHBheWxvYWQgdXNpbmcgQUVTLTI1NiBpbiBDQkMgbW9kZS4KICAgICAqCiAgICAgKiBAcGFyYW0gZGF0YSBwYXlsb2FkCiAgICAgKiBAcGFyYW0gZW5jcnlwdGlvbktleSBuZWVkcyB0byBiZSAxMjggYml0cyAoMTYgYnl0ZXMpLCAxOTIgYml0cyAoMjQgYnl0ZXMpIG9yIDI1NiBiaXRzICgzMiBieXRlcykgbG9uZy4KICAgICAqIEByZXR1cm5zIHtzdHJpbmd9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZW5jcnlwdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jcnlwdChkYXRhLCBlbmNyeXB0aW9uS2V5KSB7CiAgICAgIHZhciBhZXNJbnN0YW5jZSA9IG5ldyBhZXMuTW9kZU9mT3BlcmF0aW9uLmNiYyhlbmNyeXB0aW9uS2V5KTsKICAgICAgdmFyIGRhdGFJbkJ5dGVzID0gYWVzLnV0aWxzLnV0ZjgudG9CeXRlcyhkYXRhKTsKICAgICAgdmFyIGVuY3J5cHRlZEJ5dGVzID0gYWVzSW5zdGFuY2UuZW5jcnlwdChhZXMucGFkZGluZy5wa2NzNy5wYWQoZGF0YUluQnl0ZXMpKTsKICAgICAgcmV0dXJuIGFlcy51dGlscy5oZXguZnJvbUJ5dGVzKGVuY3J5cHRlZEJ5dGVzKTsKICAgIH0KICAgIC8qKgogICAgICogR2l2ZW4gZW5jcnlwdGVkIGRhdGEsIGRlY3J5cHRzIGl0IGFuZCBjb252ZXJ0cyBpdCBiYWNrIHRvIGEgcmVhZGFibGUgVVRGLTggc3RyaW5nLgogICAgICoKICAgICAqIEBwYXJhbSBkYXRhCiAgICAgKiBAcGFyYW0gZW5jcnlwdGlvbktleQogICAgICogQHJldHVybnMge3N0cmluZ30KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZWNyeXB0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0KGRhdGEsIGVuY3J5cHRpb25LZXkpIHsKICAgICAgdmFyIGFlc0luc3RhbmNlID0gbmV3IGFlcy5Nb2RlT2ZPcGVyYXRpb24uY2JjKGVuY3J5cHRpb25LZXkpOwogICAgICB2YXIgZGF0YUluQnl0ZXMgPSBhZXMudXRpbHMuaGV4LnRvQnl0ZXMoZGF0YSk7CiAgICAgIHZhciBkZWNyeXB0ZWRCeXRlcyA9IGFlc0luc3RhbmNlLmRlY3J5cHQoZGF0YUluQnl0ZXMpOwogICAgICByZXR1cm4gYWVzLnV0aWxzLnV0ZjguZnJvbUJ5dGVzKGFlcy5wYWRkaW5nLnBrY3M3LnN0cmlwKGRlY3J5cHRlZEJ5dGVzKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2VjdXJpdHk7Cn0oKTs="},{"version":3,"names":["pbkdf2","aes","Security","password","salt","iterations","Promise","resolve","reject","error","encryptionKey","data","aesInstance","ModeOfOperation","cbc","dataInBytes","utils","utf8","toBytes","encryptedBytes","encrypt","padding","pkcs7","pad","hex","fromBytes","decryptedBytes","decrypt","strip"],"sources":["/home/kaliuser/test/vaults/frontend/src/plugins/Security.js"],"sourcesContent":["import * as pbkdf2 from \"pbkdf2\";\nimport * as aes from \"aes-js\";\n\n/**\n * Used to hash the master password, make an encryption key & authentication hash out of it,\n * as well as encrypt & decrypt the vault data with the formerly created key.\n */\nexport class Security {\n\n    /**\n     * Asynchronously hashes the given data using PBKDF2 as a method.\n     *\n     * @param password The password to be hashed.\n     * @param salt A unique salt for each user, this will be the E-Mail.\n     * @param iterations How many times the hash takes places.\n     * @returns {Promise<unknown>}\n     */\n    hash(password, salt, iterations) {\n        return new Promise((resolve, reject) => {\n            pbkdf2.pbkdf2(password, salt, iterations, 32, \"sha256\", (error, encryptionKey) => {\n                if (error) {\n                    return reject(error);\n                }\n\n                resolve(encryptionKey);\n            });\n        })\n    }\n\n    /**\n     * Given an encryption key, encrypts the payload using AES-256 in CBC mode.\n     *\n     * @param data payload\n     * @param encryptionKey needs to be 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes) long.\n     * @returns {string}\n     */\n    encrypt(data, encryptionKey) {\n        let aesInstance = new aes.ModeOfOperation.cbc(encryptionKey);\n\n        let dataInBytes = aes.utils.utf8.toBytes(data);\n        let encryptedBytes = aesInstance.encrypt(aes.padding.pkcs7.pad(dataInBytes));\n\n        return aes.utils.hex.fromBytes(encryptedBytes);\n    }\n\n    /**\n     * Given encrypted data, decrypts it and converts it back to a readable UTF-8 string.\n     *\n     * @param data\n     * @param encryptionKey\n     * @returns {string}\n     */\n    decrypt(data, encryptionKey) {\n        let aesInstance = new aes.ModeOfOperation.cbc(encryptionKey);\n        let dataInBytes = aes.utils.hex.toBytes(data);\n        let decryptedBytes = aesInstance.decrypt(dataInBytes);\n\n        return aes.utils.utf8.fromBytes(aes.padding.pkcs7.strip(decryptedBytes));\n    }\n}\n"],"mappings":";;;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB;AAEA;AACA;AACA;AACA;;AACA,WAAaC,QAAb;EAAA;IAAA;EAAA;;EAAA;IAAA;IAAA;IAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,cAAKC,QAAL,EAAeC,IAAf,EAAqBC,UAArB,EAAiC;MAC7B,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACpCR,MAAM,CAACA,MAAP,CAAcG,QAAd,EAAwBC,IAAxB,EAA8BC,UAA9B,EAA0C,EAA1C,EAA8C,QAA9C,EAAwD,UAACI,KAAD,EAAQC,aAAR,EAA0B;UAC9E,IAAID,KAAJ,EAAW;YACP,OAAOD,MAAM,CAACC,KAAD,CAAb;UACH;;UAEDF,OAAO,CAACG,aAAD,CAAP;QACH,CAND;MAOH,CARM,CAAP;IASH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;;EA5BA;IAAA;IAAA,OA6BI,iBAAQC,IAAR,EAAcD,aAAd,EAA6B;MACzB,IAAIE,WAAW,GAAG,IAAIX,GAAG,CAACY,eAAJ,CAAoBC,GAAxB,CAA4BJ,aAA5B,CAAlB;MAEA,IAAIK,WAAW,GAAGd,GAAG,CAACe,KAAJ,CAAUC,IAAV,CAAeC,OAAf,CAAuBP,IAAvB,CAAlB;MACA,IAAIQ,cAAc,GAAGP,WAAW,CAACQ,OAAZ,CAAoBnB,GAAG,CAACoB,OAAJ,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsBR,WAAtB,CAApB,CAArB;MAEA,OAAOd,GAAG,CAACe,KAAJ,CAAUQ,GAAV,CAAcC,SAAd,CAAwBN,cAAxB,CAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;;EA5CA;IAAA;IAAA,OA6CI,iBAAQR,IAAR,EAAcD,aAAd,EAA6B;MACzB,IAAIE,WAAW,GAAG,IAAIX,GAAG,CAACY,eAAJ,CAAoBC,GAAxB,CAA4BJ,aAA5B,CAAlB;MACA,IAAIK,WAAW,GAAGd,GAAG,CAACe,KAAJ,CAAUQ,GAAV,CAAcN,OAAd,CAAsBP,IAAtB,CAAlB;MACA,IAAIe,cAAc,GAAGd,WAAW,CAACe,OAAZ,CAAoBZ,WAApB,CAArB;MAEA,OAAOd,GAAG,CAACe,KAAJ,CAAUC,IAAV,CAAeQ,SAAf,CAAyBxB,GAAG,CAACoB,OAAJ,CAAYC,KAAZ,CAAkBM,KAAlB,CAAwBF,cAAxB,CAAzB,CAAP;IACH;EAnDL;;EAAA;AAAA"}]}