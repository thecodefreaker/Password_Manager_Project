{"remainingRequest":"/media/sf_New_Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js!/media/sf_New_Folder/test/vaults/frontend/node_modules/eslint-loader/index.js??ref--14-0!/media/sf_New_Folder/test/vaults/frontend/src/services/api/vault.js","dependencies":[{"path":"/media/sf_New_Folder/test/vaults/frontend/src/services/api/vault.js","mtime":1713871927302},{"path":"/media/sf_New_Folder/test/vaults/frontend/babel.config.js","mtime":1713871927298},{"path":"/media/sf_New_Folder/test/vaults/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/sf_New_Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/sf_New_Folder/test/vaults/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["http","api","Factory","Security","store","endpoints","API","CREATE","UPDATE","vaultId","DELETE","ITEMS","security","getItems","self","init","fetchItems","url","request","method","data","items","fetchItemsSuccessHandler","response","status","decryptedItems","decryptResponseObjects","createItemsFromFactory","dispatch","formatted","forEach","item","type","item_type","itemObject","id","vault_id","category_id","create","push","dto","fetchAll","fetchVaults","vaults","successHandler","decryptedVaults","createVaultsFromFactory","vault","vaultObject","values","createVault","decryptedLogin","decryptResponseObject","createVaultFromFactory","update","updateVault","delete","deleteVault","JSON","stringify","encryptVault","encrypt","getters"],"sources":["/media/sf_New_Folder/test/vaults/frontend/src/services/api/vault.js"],"sourcesContent":["import http from \"../http\";\nimport {api} from \"./index\";\nimport {Factory} from \"../../factory\";\nimport {Security} from \"../../plugins/Security\";\nimport store from \"../../store\";\n\nexport default {\n    endpoints: {\n        API: \"/vaults\",\n        CREATE() {\n            return this.API;\n        },\n        UPDATE(vaultId) {\n            return this.API + \"/\" + vaultId;\n        },\n        DELETE(vaultId) {\n            return this.API + \"/\" + vaultId;\n        },\n        ITEMS(vaultId) {\n            return this.API + \"/\" + vaultId + \"/items\";\n        }\n    },\n\n    store,\n\n    security: new Security(),\n\n    /**\n     * The main method to fetch all items for this vault.\n     *\n     * @param vaultId\n     * @returns {Promise<*>}\n     */\n    async getItems(vaultId) {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @param vaultId\n         * @returns {Promise<*|undefined>}\n         */\n        const init = async function(vaultId) {\n            try {\n                return await fetchItems(vaultId);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Requests all items for this vault.\n         *\n         * @param vaultId\n         * @returns {Promise<*|undefined>}\n         */\n        const fetchItems = async function(vaultId) {\n            let url = self.endpoints.ITEMS(vaultId)\n\n            let items = await http.request({\n                method: \"get\",\n                url: url,\n                data: null\n            });\n\n            return await fetchItemsSuccessHandler(items);\n        };\n\n        /**\n         * Handler when 'fetchItems' resolved successfully.\n         *\n         * @param response\n         * @returns {Promise<*>}\n         */\n        const fetchItemsSuccessHandler = async function(response) {\n            if(response.status === 200) {\n                let decryptedItems = api.decryptResponseObjects(response.data);\n                let items = createItemsFromFactory(decryptedItems);\n\n                await self.store.dispatch(\"user/setItems\", items);\n\n                return response;\n            }\n        };\n\n        const createItemsFromFactory = function(items) {\n            let formatted = [];\n\n            items.forEach(item => {\n                let type = item.data.item_type;\n                let itemObject = {\n                    id: item.id,\n                    data: item.data,\n                    vault_id: item.vault_id,\n                    category_id: item.category_id\n                };\n\n                itemObject = new Factory().create(type, itemObject);\n\n                formatted.push(itemObject.dto());\n            });\n\n            return formatted;\n        };\n\n        return await init(vaultId);\n    },\n\n    /**\n     * The main method to fetch the user's encrypted vaults.\n     *\n     * @returns {Promise<void>}\n     */\n    async fetchAll() {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @returns {Promise<*|*>}\n         */\n        const init = async function() {\n            try {\n                return await fetchVaults();\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Requests the user's encrypted vaults.\n         *\n         * @returns {Promise<*>}\n         */\n        const fetchVaults = async function() {\n            let vaults = await http.request({\n                method: \"get\",\n                url: self.endpoints.API,\n                data: null\n            });\n\n            return await successHandler(vaults);\n        };\n\n        /**\n         * Handler when 'fetchVaults' resolved successfully.\n         *\n         * @param response\n         * @returns {{}}\n         */\n        const successHandler = async function(response) {\n            if(response.status === 200) {\n                let decryptedVaults = api.decryptResponseObjects(response.data);\n\n                let vaults = createVaultsFromFactory(decryptedVaults);\n\n                await self.store.dispatch(\"user/setVaults\", vaults);\n            }\n\n            return response;\n        };\n\n        const createVaultsFromFactory = function(vaults) {\n            let formatted = [];\n\n            vaults.forEach(vault => {\n                let vaultObject = new Factory().create(\"vault\", vault);\n\n                formatted.push(vaultObject.dto());\n            });\n\n            return formatted;\n        };\n\n        return await init();\n    },\n\n    /**\n     * The main method to create an encrypted vault.\n     *\n     * @param values\n     * @returns {Promise<AxiosResponse<any>|*>}\n     */\n    async create(values) {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @param values\n         * @returns {Promise<AxiosResponse<*>|*>}\n         */\n        const init = async function(values) {\n            try {\n                return await createVault(values);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Makes the request to create a vault.\n         *\n         * @param values\n         * @returns {Promise<AxiosResponse<any>>}\n         */\n        const createVault = async function(values) {\n            let response = await http.request({\n                method: \"post\",\n                url: self.endpoints.CREATE(),\n                data: {\n                    data: values\n                }\n            });\n\n            return await successHandler(response);\n        };\n\n        const successHandler = async function(response) {\n            if(response.status === 201) {\n                let decryptedLogin = api.decryptResponseObject(response.data);\n                let vault = self.createVaultFromFactory(decryptedLogin);\n\n                await self.store.dispatch(\"user/addVault\", vault);\n            }\n\n            return response;\n        };\n\n        return await init(values);\n    },\n\n    /**\n     * The main method to update a vault.\n     *\n     * @param id\n     * @param values\n     * @returns {Promise<AxiosResponse<any>|*>}\n     */\n    async update(id, values) {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @param id\n         * @param values\n         * @returns {Promise<AxiosResponse<*>|*>}\n         */\n        const init = async function(id, values) {\n            try {\n                return await updateVault(id, values);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Makes the request to update a vault.\n         *\n         * @param id\n         * @param values\n         * @returns {Promise<AxiosResponse<any>>}\n         */\n        const updateVault = async function(id, values) {\n            let url = self.endpoints.UPDATE(id);\n\n            let response = await http.request({\n                method: \"put\",\n                url: url,\n                data: {\n                    data: values\n                }\n            });\n\n            return await successHandler(response);\n        };\n\n        const successHandler = async function(response) {\n            if(response.status === 200) {\n                let decryptedLogin = api.decryptResponseObject(response.data);\n                let vault = self.createVaultFromFactory(decryptedLogin);\n\n                await self.store.dispatch(\"user/updateVault\", vault);\n            }\n\n            return response;\n        };\n\n        return await init(id, values);\n    },\n\n    /**\n     * The main method to delete a vault.\n     *\n     * @param id\n     * @returns {Promise<AxiosResponse<*>|*>}\n     */\n    async delete(id) {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @param id\n         * @returns {Promise<AxiosResponse<*>|*>}\n         */\n        const init = async function(id) {\n            try {\n                return await deleteVault(id);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Makes the request to delete a vault.\n         *\n         * @param id\n         * @returns {Promise<AxiosResponse<any>>}\n         */\n        const deleteVault = async function(id) {\n            let url = self.endpoints.DELETE(id);\n\n            let response = await http.request({\n                method: \"delete\",\n                url: url,\n                data: JSON.stringify({})\n            });\n\n            return await successHandler(response, id);\n        };\n\n        const successHandler = async function(response, id) {\n            if(response.status === 204) {\n                await self.store.dispatch(\"user/deleteVault\", id);\n            }\n\n            return response;\n        };\n\n        return await init(id);\n    },\n\n    createVaultFromFactory(item) {\n        let formatted = new Factory().create(\"vault\", item);\n\n        return formatted.dto();\n    },\n\n    /**\n     * Encrypts given vault data; used when creating and updating.\n     *\n     * @param data\n     * @returns {string}\n     */\n    encryptVault(data) {\n        data = JSON.stringify(data);\n\n        return this.security.encrypt(data, this.store.getters[\"user/getEncryptionKey\"]);\n    }\n}\n"],"mappings":"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"}]}