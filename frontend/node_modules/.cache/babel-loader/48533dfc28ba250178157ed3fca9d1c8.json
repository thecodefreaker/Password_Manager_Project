{"remainingRequest":"/media/sf_New_Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js!/media/sf_New_Folder/test/vaults/frontend/node_modules/eslint-loader/index.js??ref--14-0!/media/sf_New_Folder/test/vaults/frontend/src/services/api/note.js","dependencies":[{"path":"/media/sf_New_Folder/test/vaults/frontend/src/services/api/note.js","mtime":1713871927302},{"path":"/media/sf_New_Folder/test/vaults/frontend/babel.config.js","mtime":1713871927298},{"path":"/media/sf_New_Folder/test/vaults/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/sf_New_Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/media/sf_New_Folder/test/vaults/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["http","api","store","Factory","Security","ITEM_TYPE","endpoints","API","CREATE","UPDATE","noteId","DELETE","security","create","values","vaultId","self","init","handler","object","encryptedData","beforeDispatch","categoryId","category","createNote","url","request","method","data","response","successHandler","status","decryptedNote","decryptResponseObject","item","createNoteFromFactory","dispatch","update","id","updateNote","delete","deleteNote","JSON","stringify","item_type","encrypt","getters","formatted","dto"],"sources":["/media/sf_New_Folder/test/vaults/frontend/src/services/api/note.js"],"sourcesContent":["import http from \"../http\";\nimport {api} from \"./index\";\nimport store from \"../../store\";\nimport {Factory} from \"../../factory\";\nimport {Security} from \"../../plugins/Security\";\n\nexport default {\n    ITEM_TYPE: \"note\",\n\n    endpoints: {\n        API: \"/notes\",\n        CREATE() {\n            return this.API;\n        },\n        UPDATE(noteId) {\n            return this.API + \"/\" + noteId;\n        },\n        DELETE(noteId) {\n            return this.API + \"/\" + noteId;\n        }\n    },\n\n    store,\n\n    security: new Security(),\n\n    /**\n     * The main method for creating a note object.\n     *\n     * @param values\n     * @param vaultId\n     * @returns {Promise<*|*|undefined>}\n     */\n    async create(values, vaultId) {\n        let self = this;\n\n        /**\n         * Initializes the process of creating a note.\n         *\n         * @param values\n         * @param vaultId\n         * @returns {Promise<void|*>}\n         */\n        const init = async function(values, vaultId) {\n            try {\n                return await handler(values, vaultId);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Handles the request to create a note.\n         */\n        const handler = async function(object, vaultId) {\n            let encryptedData = self.beforeDispatch(object);\n            let categoryId = object.category ?? \"\";\n\n            object = {\n                encryptedData,\n                categoryId\n            };\n\n            return await createNote(object, vaultId);\n        }\n\n        /**\n         * Makes the request to create a note.\n         */\n        const createNote = async function(object, vaultId) {\n            let url = self.endpoints.CREATE();\n\n            let response = await http.request({\n                method: \"post\",\n                url: url,\n                data: {\n                    data: object.encryptedData,\n                    vaultId: vaultId,\n                    categoryId: object.categoryId\n                }\n            });\n\n            return successHandler(response);\n        };\n\n        const successHandler = async function(response) {\n            if(response.status === 201) {\n                let decryptedNote = api.decryptResponseObject(response.data);\n                let item = self.createNoteFromFactory(decryptedNote);\n\n                await self.store.dispatch(\"user/addItem\", item);\n\n                return item;\n            }\n        };\n\n        return await init(values, vaultId);\n    },\n\n    /**\n     * The main method for updating a note object.\n     *\n     * @param object\n     * @param id\n     * @returns {Promise<*>}\n     */\n    async update(object, id) {\n        let self = this;\n\n        /**\n         * Initializes the process of updating a note.\n         *\n         * @param object\n         * @param id\n         * @returns {Promise<*>}\n         */\n        const init = async function(object, id) {\n            try {\n                return await handler(object, id);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Handles the request to update a note.\n         */\n        const handler = async function(object, id) {\n            let encryptedData = self.beforeDispatch(object);\n            let categoryId = object.category ?? \"\";\n\n            object = {\n                encryptedData,\n                categoryId\n            };\n\n            return await updateNote(object, id);\n        };\n\n        /**\n         * Makes the request to update a note.\n         */\n        const updateNote = async function(object, id) {\n            let url = self.endpoints.UPDATE(id);\n\n            let response = await http.request({\n                method: \"put\",\n                url: url,\n                data: {\n                    data: object.encryptedData,\n                    categoryId: object.categoryId\n                }\n            });\n\n            return successHandler(response);\n        };\n\n        const successHandler = async function(response) {\n            if(response.status === 200) {\n                let decryptedNote = api.decryptResponseObject(response.data);\n                let item = self.createNoteFromFactory(decryptedNote);\n\n                await self.store.dispatch(\"user/updateItem\", item);\n\n                return item;\n            }\n        };\n\n        return await init(object, id);\n    },\n\n    /**\n     * Main method for deleting a note object.\n     *\n     * @param id\n     * @returns {Promise<*>}\n     */\n    async delete(id) {\n        let self = this;\n\n        /**\n         * Initializes the process of deleting a note.\n         *\n         * @param id\n         * @returns {Promise<*>}\n         */\n        const init = async function(id) {\n            try {\n                return await deleteNote(id);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Makes the request to delete a note.\n         */\n        const deleteNote = async function(id) {\n            let url = self.endpoints.DELETE(id);\n\n            let response = await http.request({\n                method: \"delete\",\n                url: url,\n                data: JSON.stringify({})\n            });\n\n            return successHandler(response, id);\n        };\n\n        const successHandler = async function(response) {\n            if(response.status === 204) {\n                await self.store.dispatch(\"user/deleteItem\", id);\n\n                return response;\n            }\n        };\n\n        return await init(id);\n    },\n\n    /**\n     * First steps such as setting the item type, converting to JSON & encrypting the object.\n     */\n    beforeDispatch(object) {\n        object.item_type = this.ITEM_TYPE;\n        object = JSON.stringify(object);\n\n        return this.security.encrypt(object, this.store.getters[\"user/getEncryptionKey\"]);\n    },\n\n    createNoteFromFactory(item) {\n        let formatted = new Factory().create(\"note\", item);\n\n        return formatted.dto();\n    }\n}\n"],"mappings":"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"}]}