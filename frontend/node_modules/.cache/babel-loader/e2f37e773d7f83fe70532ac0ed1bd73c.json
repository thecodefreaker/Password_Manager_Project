{"remainingRequest":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js!/home/kaliuser/New Folder/test/vaults/frontend/node_modules/eslint-loader/index.js??ref--14-0!/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/login.js","dependencies":[{"path":"/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/login.js","mtime":1713871927302},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/babel.config.js","mtime":1713871927298},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["http","api","store","Factory","Security","ITEM_TYPE","endpoints","API","CREATE","UPDATE","loginId","DELETE","security","create","values","vaultId","self","init","handler","object","encryptedData","beforeDispatch","categoryId","category","createLogin","url","request","method","data","response","successHandler","status","decryptedLogin","decryptResponseObject","item","createLoginFromFactory","dispatch","update","id","updateLogin","delete","deleteLogin","JSON","stringify","item_type","encrypt","getters","formatted","dto"],"sources":["/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/login.js"],"sourcesContent":["import http from \"../http\";\nimport {api} from \"./index\";\nimport store from \"../../store\";\nimport {Factory} from \"../../factory\";\nimport {Security} from \"../../plugins/Security\";\n\nexport default {\n    ITEM_TYPE: \"login\",\n\n    endpoints: {\n        API: \"/logins\",\n        CREATE() {\n            return this.API;\n        },\n        UPDATE(loginId) {\n            return this.API + \"/\" + loginId;\n        },\n        DELETE(loginId) {\n            return this.API + \"/\" + loginId;\n        }\n    },\n\n    store,\n\n    security: new Security(),\n\n    /**\n     * The main method for creating a login object.\n     *\n     * @param values\n     * @param vaultId\n     * @returns {Promise<*|*|undefined>}\n     */\n    async create(values, vaultId) {\n        let self = this;\n\n        /**\n         * Initializes the process of creating a login.\n         *\n         * @param values\n         * @param vaultId\n         * @returns {Promise<void|*>}\n         */\n        const init = async function(values, vaultId) {\n            try {\n                return await handler(values, vaultId);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Handles the request to create a login.\n         */\n        const handler = async function(object, vaultId) {\n            let encryptedData = self.beforeDispatch(object);\n            let categoryId = object.category ?? \"\";\n\n            object = {\n                encryptedData,\n                categoryId\n            }\n\n            return await createLogin(object, vaultId);\n        }\n\n        /**\n         * Makes the request to create a login.\n         */\n        const createLogin = async function(object, vaultId) {\n            let url = self.endpoints.CREATE();\n\n            let response = await http.request({\n                method: \"post\",\n                url: url,\n                data: {\n                    data: object.encryptedData,\n                    vaultId: vaultId,\n                    categoryId: object.categoryId\n                }\n            });\n\n            return successHandler(response);\n        };\n\n        const successHandler = async function(response) {\n            if(response.status === 201) {\n                let decryptedLogin = api.decryptResponseObject(response.data);\n                let item = self.createLoginFromFactory(decryptedLogin);\n\n                await self.store.dispatch(\"user/addItem\", item);\n\n                return item;\n            }\n        };\n\n        return await init(values, vaultId);\n    },\n\n    /**\n     * The main method for updating a login object.\n     *\n     * @param object\n     * @param id\n     * @returns {Promise<*>}\n     */\n    async update(object, id) {\n        let self = this;\n\n        /**\n         * Initializes the process of updating a login.\n         *\n         * @param object\n         * @param id\n         * @returns {Promise<*>}\n         */\n        const init = async function(object, id) {\n            try {\n                return await handler(object, id);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Handles the request to update a login.\n         */\n        const handler = async function(object, id) {\n            let encryptedData = self.beforeDispatch(object);\n            let categoryId = object.category ?? \"\";\n\n            object = {\n                encryptedData,\n                categoryId\n            }\n\n            return await updateLogin(object, id);\n        };\n\n        /**\n         * Makes the request to update a login.\n         */\n        const updateLogin = async function(object, id) {\n            let url = self.endpoints.UPDATE(id);\n\n            let response = await http.request({\n                method: \"put\",\n                url: url,\n                data: {\n                    data: object.encryptedData,\n                    categoryId: object.categoryId\n                }\n            });\n\n            return successHandler(response);\n        };\n\n        const successHandler = async function(response) {\n            if(response.status === 200) {\n                let decryptedLogin = api.decryptResponseObject(response.data);\n                let item = self.createLoginFromFactory(decryptedLogin);\n\n                await self.store.dispatch(\"user/updateItem\", item);\n\n                return item;\n            }\n        };\n\n        return await init(object, id);\n    },\n\n    /**\n     * Main method for deleting a login object.\n     *\n     * @param id\n     * @returns {Promise<*>}\n     */\n    async delete(id) {\n        let self = this;\n\n        /**\n         * Initializes the process of deleting a login.\n         *\n         * @param id\n         * @returns {Promise<*>}\n         */\n        const init = async function(id) {\n            try {\n                return await deleteLogin(id);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Makes the request to delete a login.\n         */\n        const deleteLogin = async function(id) {\n            let url = self.endpoints.DELETE(id);\n\n            let response = await http.request({\n                method: \"delete\",\n                url: url,\n                data: JSON.stringify({})\n            });\n\n            return successHandler(response, id);\n        };\n\n        const successHandler = async function(response, id) {\n            if(response.status === 204) {\n                await self.store.dispatch(\"user/deleteItem\", id);\n\n                await self.store.dispatch(\"user/setGeneratedPassword\", \"\");\n\n                return response;\n            }\n        };\n\n        return await init(id);\n    },\n\n    /**\n     * First steps such as setting the item type, converting to JSON & encrypting the object.\n     */\n    beforeDispatch(object) {\n        object.item_type = this.ITEM_TYPE;\n        object = JSON.stringify(object);\n\n        return this.security.encrypt(object, this.store.getters[\"user/getEncryptionKey\"]);\n    },\n\n    createLoginFromFactory(item) {\n        let formatted = new Factory().create(\"login\", item);\n\n        return formatted.dto();\n    }\n}\n"],"mappings":"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"}]}