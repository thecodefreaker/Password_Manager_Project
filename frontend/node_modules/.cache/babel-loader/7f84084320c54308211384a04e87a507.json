{"remainingRequest":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js!/home/kaliuser/New Folder/test/vaults/frontend/node_modules/eslint-loader/index.js??ref--14-0!/home/kaliuser/New Folder/test/vaults/frontend/src/plugins/Security.js","dependencies":[{"path":"/home/kaliuser/New Folder/test/vaults/frontend/src/plugins/Security.js","mtime":1713871927302},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/babel.config.js","mtime":1713871927298},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS9rYWxpdXNlci9OZXcgRm9sZGVyL3Rlc3QvdmF1bHRzL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUva2FsaXVzZXIvTmV3IEZvbGRlci90ZXN0L3ZhdWx0cy9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICogYXMgcGJrZGYyIGZyb20gInBia2RmMiI7CmltcG9ydCAqIGFzIGFlcyBmcm9tICJhZXMtanMiOwovKioKICogVXNlZCB0byBoYXNoIHRoZSBtYXN0ZXIgcGFzc3dvcmQsIG1ha2UgYW4gZW5jcnlwdGlvbiBrZXkgJiBhdXRoZW50aWNhdGlvbiBoYXNoIG91dCBvZiBpdCwKICogYXMgd2VsbCBhcyBlbmNyeXB0ICYgZGVjcnlwdCB0aGUgdmF1bHQgZGF0YSB3aXRoIHRoZSBmb3JtZXJseSBjcmVhdGVkIGtleS4KICovCgpleHBvcnQgdmFyIFNlY3VyaXR5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTZWN1cml0eSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWN1cml0eSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU2VjdXJpdHksIFt7CiAgICBrZXk6ICJoYXNoIiwKICAgIHZhbHVlOgogICAgLyoqCiAgICAgKiBBc3luY2hyb25vdXNseSBoYXNoZXMgdGhlIGdpdmVuIGRhdGEgdXNpbmcgUEJLREYyIGFzIGEgbWV0aG9kLgogICAgICoKICAgICAqIEBwYXJhbSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gYmUgaGFzaGVkLgogICAgICogQHBhcmFtIHNhbHQgQSB1bmlxdWUgc2FsdCBmb3IgZWFjaCB1c2VyLCB0aGlzIHdpbGwgYmUgdGhlIEUtTWFpbC4KICAgICAqIEBwYXJhbSBpdGVyYXRpb25zIEhvdyBtYW55IHRpbWVzIHRoZSBoYXNoIHRha2VzIHBsYWNlcy4KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fQogICAgICovCiAgICBmdW5jdGlvbiBoYXNoKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zKSB7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgcGJrZGYyLnBia2RmMihwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgMzIsICJzaGEyNTYiLCBmdW5jdGlvbiAoZXJyb3IsIGVuY3J5cHRpb25LZXkpIHsKICAgICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXNvbHZlKGVuY3J5cHRpb25LZXkpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogR2l2ZW4gYW4gZW5jcnlwdGlvbiBrZXksIGVuY3J5cHRzIHRoZSBwYXlsb2FkIHVzaW5nIEFFUy0yNTYgaW4gQ0JDIG1vZGUuCiAgICAgKgogICAgICogQHBhcmFtIGRhdGEgcGF5bG9hZAogICAgICogQHBhcmFtIGVuY3J5cHRpb25LZXkgbmVlZHMgdG8gYmUgMTI4IGJpdHMgKDE2IGJ5dGVzKSwgMTkyIGJpdHMgKDI0IGJ5dGVzKSBvciAyNTYgYml0cyAoMzIgYnl0ZXMpIGxvbmcuCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogImVuY3J5cHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuY3J5cHQoZGF0YSwgZW5jcnlwdGlvbktleSkgewogICAgICB2YXIgYWVzSW5zdGFuY2UgPSBuZXcgYWVzLk1vZGVPZk9wZXJhdGlvbi5jYmMoZW5jcnlwdGlvbktleSk7CiAgICAgIHZhciBkYXRhSW5CeXRlcyA9IGFlcy51dGlscy51dGY4LnRvQnl0ZXMoZGF0YSk7CiAgICAgIHZhciBlbmNyeXB0ZWRCeXRlcyA9IGFlc0luc3RhbmNlLmVuY3J5cHQoYWVzLnBhZGRpbmcucGtjczcucGFkKGRhdGFJbkJ5dGVzKSk7CiAgICAgIHJldHVybiBhZXMudXRpbHMuaGV4LmZyb21CeXRlcyhlbmNyeXB0ZWRCeXRlcyk7CiAgICB9CiAgICAvKioKICAgICAqIEdpdmVuIGVuY3J5cHRlZCBkYXRhLCBkZWNyeXB0cyBpdCBhbmQgY29udmVydHMgaXQgYmFjayB0byBhIHJlYWRhYmxlIFVURi04IHN0cmluZy4KICAgICAqCiAgICAgKiBAcGFyYW0gZGF0YQogICAgICogQHBhcmFtIGVuY3J5cHRpb25LZXkKICAgICAqIEByZXR1cm5zIHtzdHJpbmd9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZGVjcnlwdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVjcnlwdChkYXRhLCBlbmNyeXB0aW9uS2V5KSB7CiAgICAgIHZhciBhZXNJbnN0YW5jZSA9IG5ldyBhZXMuTW9kZU9mT3BlcmF0aW9uLmNiYyhlbmNyeXB0aW9uS2V5KTsKICAgICAgdmFyIGRhdGFJbkJ5dGVzID0gYWVzLnV0aWxzLmhleC50b0J5dGVzKGRhdGEpOwogICAgICB2YXIgZGVjcnlwdGVkQnl0ZXMgPSBhZXNJbnN0YW5jZS5kZWNyeXB0KGRhdGFJbkJ5dGVzKTsKICAgICAgcmV0dXJuIGFlcy51dGlscy51dGY4LmZyb21CeXRlcyhhZXMucGFkZGluZy5wa2NzNy5zdHJpcChkZWNyeXB0ZWRCeXRlcykpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNlY3VyaXR5Owp9KCk7"},{"version":3,"names":["pbkdf2","aes","Security","password","salt","iterations","Promise","resolve","reject","error","encryptionKey","data","aesInstance","ModeOfOperation","cbc","dataInBytes","utils","utf8","toBytes","encryptedBytes","encrypt","padding","pkcs7","pad","hex","fromBytes","decryptedBytes","decrypt","strip"],"sources":["/home/kaliuser/New Folder/test/vaults/frontend/src/plugins/Security.js"],"sourcesContent":["import * as pbkdf2 from \"pbkdf2\";\nimport * as aes from \"aes-js\";\n\n/**\n * Used to hash the master password, make an encryption key & authentication hash out of it,\n * as well as encrypt & decrypt the vault data with the formerly created key.\n */\nexport class Security {\n\n    /**\n     * Asynchronously hashes the given data using PBKDF2 as a method.\n     *\n     * @param password The password to be hashed.\n     * @param salt A unique salt for each user, this will be the E-Mail.\n     * @param iterations How many times the hash takes places.\n     * @returns {Promise<unknown>}\n     */\n    hash(password, salt, iterations) {\n        return new Promise((resolve, reject) => {\n            pbkdf2.pbkdf2(password, salt, iterations, 32, \"sha256\", (error, encryptionKey) => {\n                if (error) {\n                    return reject(error);\n                }\n\n                resolve(encryptionKey);\n            });\n        })\n    }\n\n    /**\n     * Given an encryption key, encrypts the payload using AES-256 in CBC mode.\n     *\n     * @param data payload\n     * @param encryptionKey needs to be 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes) long.\n     * @returns {string}\n     */\n    encrypt(data, encryptionKey) {\n        let aesInstance = new aes.ModeOfOperation.cbc(encryptionKey);\n\n        let dataInBytes = aes.utils.utf8.toBytes(data);\n        let encryptedBytes = aesInstance.encrypt(aes.padding.pkcs7.pad(dataInBytes));\n\n        return aes.utils.hex.fromBytes(encryptedBytes);\n    }\n\n    /**\n     * Given encrypted data, decrypts it and converts it back to a readable UTF-8 string.\n     *\n     * @param data\n     * @param encryptionKey\n     * @returns {string}\n     */\n    decrypt(data, encryptionKey) {\n        let aesInstance = new aes.ModeOfOperation.cbc(encryptionKey);\n        let dataInBytes = aes.utils.hex.toBytes(data);\n        let decryptedBytes = aesInstance.decrypt(dataInBytes);\n\n        return aes.utils.utf8.fromBytes(aes.padding.pkcs7.strip(decryptedBytes));\n    }\n}\n"],"mappings":";;;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB;AAEA;AACA;AACA;AACA;;AACA,WAAaC,QAAb;EAAA;IAAA;EAAA;;EAAA;IAAA;IAAA;IAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,cAAKC,QAAL,EAAeC,IAAf,EAAqBC,UAArB,EAAiC;MAC7B,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACpCR,MAAM,CAACA,MAAP,CAAcG,QAAd,EAAwBC,IAAxB,EAA8BC,UAA9B,EAA0C,EAA1C,EAA8C,QAA9C,EAAwD,UAACI,KAAD,EAAQC,aAAR,EAA0B;UAC9E,IAAID,KAAJ,EAAW;YACP,OAAOD,MAAM,CAACC,KAAD,CAAb;UACH;;UAEDF,OAAO,CAACG,aAAD,CAAP;QACH,CAND;MAOH,CARM,CAAP;IASH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;;EA5BA;IAAA;IAAA,OA6BI,iBAAQC,IAAR,EAAcD,aAAd,EAA6B;MACzB,IAAIE,WAAW,GAAG,IAAIX,GAAG,CAACY,eAAJ,CAAoBC,GAAxB,CAA4BJ,aAA5B,CAAlB;MAEA,IAAIK,WAAW,GAAGd,GAAG,CAACe,KAAJ,CAAUC,IAAV,CAAeC,OAAf,CAAuBP,IAAvB,CAAlB;MACA,IAAIQ,cAAc,GAAGP,WAAW,CAACQ,OAAZ,CAAoBnB,GAAG,CAACoB,OAAJ,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsBR,WAAtB,CAApB,CAArB;MAEA,OAAOd,GAAG,CAACe,KAAJ,CAAUQ,GAAV,CAAcC,SAAd,CAAwBN,cAAxB,CAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;;EA5CA;IAAA;IAAA,OA6CI,iBAAQR,IAAR,EAAcD,aAAd,EAA6B;MACzB,IAAIE,WAAW,GAAG,IAAIX,GAAG,CAACY,eAAJ,CAAoBC,GAAxB,CAA4BJ,aAA5B,CAAlB;MACA,IAAIK,WAAW,GAAGd,GAAG,CAACe,KAAJ,CAAUQ,GAAV,CAAcN,OAAd,CAAsBP,IAAtB,CAAlB;MACA,IAAIe,cAAc,GAAGd,WAAW,CAACe,OAAZ,CAAoBZ,WAApB,CAArB;MAEA,OAAOd,GAAG,CAACe,KAAJ,CAAUC,IAAV,CAAeQ,SAAf,CAAyBxB,GAAG,CAACoB,OAAJ,CAAYC,KAAZ,CAAkBM,KAAlB,CAAwBF,cAAxB,CAAzB,CAAP;IACH;EAnDL;;EAAA;AAAA"}]}