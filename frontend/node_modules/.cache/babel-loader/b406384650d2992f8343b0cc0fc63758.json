{"remainingRequest":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js!/home/kaliuser/New Folder/test/vaults/frontend/node_modules/eslint-loader/index.js??ref--14-0!/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/authentication.js","dependencies":[{"path":"/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/authentication.js","mtime":1713871927302},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/babel.config.js","mtime":1713871927298},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["http","Security","router","store","mixins","endpoints","API","REGISTER","LOGIN","LOGOUT","security","isObjectEmpty","methods","register","values","self","init","handler","deriveFromMasterPassword","master_password","email","derived","dispatch","encryptionKey","resetMasterPassword","authenticationHash","createMasterPasswordArray","toString","master_password_confirmation","url","request","method","data","form","login","login_master_password","login_email","hashes","response","successHandler","user","JSON","parse","getters","id","firstName","lastName","username","roles","registeredAt","logout","status","push","eraseLocalData","masterPassword","hash"],"sources":["/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/authentication.js"],"sourcesContent":["import http from \"../http\";\nimport {Security} from \"../../plugins/Security\";\nimport router from \"../../router\";\nimport store from \"../../store\";\nimport mixins from \"../../plugins/mixins\";\n\nexport default {\n    endpoints: {\n        API: \"/authentication\",\n        REGISTER() {\n            return this.API + \"/register\"\n        },\n        LOGIN() {\n            return this.API + \"/login\"\n        },\n        LOGOUT() {\n            return this.API + \"/logout\"\n        }\n    },\n\n    store,\n\n    router,\n\n    security: new Security(),\n\n    isObjectEmpty: mixins.methods.isObjectEmpty,\n\n    /**\n     * The main registration method.\n     *\n     * @param values\n     * @returns {Promise<AxiosResponse<any>|*|undefined>}\n     */\n    async register(values) {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @param values\n         * @returns {Promise<AxiosResponse<any>|*>}\n         */\n        const init = async function(values) {\n            try {\n                return await handler(values);\n            } catch(error) {\n                return error;\n            }\n        };\n\n        /**\n         * Creates the encryption key and authentication hash, persists the key, sets the password to the new value and triggers the request.\n         *\n         * @param values\n         * @returns {Promise<AxiosResponse<any>>}\n         */\n        const handler = async function(values) {\n            let derived = await self.deriveFromMasterPassword(values.master_password, values.email);\n\n            await self.store.dispatch(\"user/setEncryptionKey\", derived.encryptionKey);\n\n            values = resetMasterPassword(values, derived.authenticationHash);\n\n            values = createMasterPasswordArray(values);\n\n            return await register(values);\n        };\n\n        /**\n         * Sets the password & password confirmation to the authentication hash.\n         *\n         * @param values\n         * @param authenticationHash\n         */\n        const resetMasterPassword = function(values, authenticationHash) {\n            values.master_password = authenticationHash.toString(\"hex\");\n            values.master_password_confirmation = authenticationHash.toString(\"hex\")\n\n            return values;\n        };\n\n        /**\n         * Create a \"master_password\" array since the password field in the backend is a type of \"RepeatedType\",\n         * in which the two fields are children of the password field. In the end deleting the remaining \"master_password_confirmation\".\n         *\n         * @param values\n         */\n        const createMasterPasswordArray = function(values) {\n            values.master_password = {\n                \"password\": values.master_password,\n                \"password_confirmation\": values.master_password_confirmation\n            };\n\n            delete values.master_password_confirmation;\n\n            return values;\n        };\n\n        /**\n         * Makes the request to register an end-user.\n         */\n        const register = async function(values) {\n            let url = self.endpoints.REGISTER();\n\n            return await http.request({\n                method: \"post\",\n                url: url,\n                data: {\n                    form: values\n                }\n            });\n        };\n\n        return await init(values);\n    },\n\n    /**\n     * The main login method.\n     *\n     * @param values\n     * @returns {Promise<void|*|undefined>}\n     */\n    async login(values) {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @param values\n         * @returns {Promise<void|*>}\n         */\n        const init = async function(values) {\n            try {\n                return await handler(values);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Creates the encryption key and authentication hash, persists the key, sets the password to the new value and triggers the request.\n         *\n         * @param values\n         * @returns {Promise<void>}\n         */\n        const handler = async function(values) {\n            let hashes = await self.deriveFromMasterPassword(values.login_master_password, values.login_email);\n\n            await self.store.dispatch(\"user/setEncryptionKey\", hashes.encryptionKey);\n\n            values.login_master_password = hashes.authenticationHash.toString(\"hex\");\n\n            return await login(values);\n        };\n\n        /**\n         * Makes the request to login an end-user.\n         */\n        const login = async function(values) {\n            let url = self.endpoints.LOGIN();\n\n            let response = await http.request({\n                method: \"post\",\n                url: url,\n                data: {\n                    form: values\n                }\n            });\n\n            return await successHandler(response);\n        };\n\n        const successHandler = async function(response) {\n            let user = response.data.user;\n            user = JSON.parse(user);\n\n            if (self.isObjectEmpty(self.store.getters[\"user/getUser\"])) {\n                await self.store.dispatch(\"user/setUser\", {\n                    \"id\": user.id,\n                    \"firstName\": user.firstName,\n                    \"lastName\": user.lastName,\n                    \"email\": user.email,\n                    \"username\": user.username,\n                    \"roles\": user.roles,\n                    \"registeredAt\": user.registeredAt\n                })\n            }\n        }\n\n        return await init(values);\n\n    },\n\n    /**\n     * The main logout method.\n     *\n     * @returns {Promise<void|*|undefined>}\n     */\n    async logout() {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @returns {Promise<void|*>}\n         */\n        const init = async function() {\n            try {\n                return await logout();\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Makes the request to logout an end-user.\n         *\n         * @returns {Promise<void>}\n         */\n        const logout = async function() {\n            let url = self.endpoints.LOGOUT();\n\n            let response = await http.request({\n                method: \"get\",\n                url: url\n            });\n\n            return await successHandler(response);\n        };\n\n        /**\n         * Deletes the user data from the store.\n         *\n         * @param response\n         * @returns {Promise<void>}\n         */\n        const successHandler = async function(response) {\n            if (response.status === 204) {\n                await self.router.push(\"/login\");\n                await eraseLocalData();\n            }\n        };\n\n        const eraseLocalData = async function() {\n            await self.store.dispatch(\"user/setEncryptionKey\", {});\n\n            await self.store.dispatch(\"user/setGeneratedPassword\", \"\");\n\n            if (!self.isObjectEmpty(self.store.getters[\"user/getUser\"])) {\n                await self.store.dispatch(\"user/setUser\", {});\n            }\n\n            if (!self.isObjectEmpty(self.store.getters[\"user/getVaults\"])) {\n                await self.store.dispatch(\"user/setVaults\", []);\n            }\n\n            if (!self.isObjectEmpty(self.store.getters[\"user/getItems\"])) {\n                await self.store.dispatch(\"user/setItems\", []);\n            }\n\n            if (!self.isObjectEmpty(self.store.getters[\"user/getCategories\"])) {\n                await self.store.dispatch(\"user/setCategories\", []);\n            }\n        };\n\n        return await init();\n    },\n\n    /**\n     * Hash the master password into an encryption key and an authentication hash.\n     *\n     * @param masterPassword\n     * @param email\n     * @returns Object\n     */\n    async deriveFromMasterPassword(masterPassword, email) {\n        let encryptionKey = await this.security.hash(masterPassword, email, 100100);\n        let authenticationHash = await this.security.hash(masterPassword, encryptionKey, 1);\n\n        return {\n            encryptionKey,\n            authenticationHash\n        };\n    }\n}\n"],"mappings":"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"}]}