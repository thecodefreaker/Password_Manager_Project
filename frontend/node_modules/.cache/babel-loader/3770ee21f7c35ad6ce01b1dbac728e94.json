{"remainingRequest":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js!/home/kaliuser/New Folder/test/vaults/frontend/node_modules/eslint-loader/index.js??ref--14-0!/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/category.js","dependencies":[{"path":"/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/category.js","mtime":1713871927302},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/babel.config.js","mtime":1713871927298},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/kaliuser/New Folder/test/vaults/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["http","api","Factory","Security","store","endpoints","API","CREATE","DELETE","categoryId","security","fetchAll","self","init","fetchCategories","request","method","url","data","categories","successHandler","response","status","decryptedCategories","decryptResponseObjects","createCategoriesFromFactory","dispatch","formatted","forEach","category","categoryObject","id","vault_id","create","push","dto","values","vaultId","createCategory","decryptedCategory","decryptResponseObject","createCategoryFromFactory","delete","deleteCategory","JSON","stringify","items","getters","filter","item","encryptCategory","encrypt"],"sources":["/home/kaliuser/New Folder/test/vaults/frontend/src/services/api/category.js"],"sourcesContent":["import http from \"../http\";\nimport {api} from \"./index\";\nimport {Factory} from \"../../factory\";\nimport {Security} from \"../../plugins/Security\";\nimport store from \"../../store\";\n\nexport default {\n    endpoints: {\n        API: \"/categories\",\n        CREATE() {\n            return this.API;\n        },\n        DELETE(categoryId) {\n            return this.API + \"/\" + categoryId;\n        }\n    },\n\n    store,\n\n    security: new Security(),\n\n    /**\n     * The main method to fetch the user's encrypted categories.\n     *\n     * @returns {Promise<void>}\n     */\n    async fetchAll() {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @returns {Promise<*|*>}\n         */\n        const init = async function() {\n            try {\n                return await fetchCategories();\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Requests the user's encrypted categories.\n         *\n         * @returns {Promise<*>}\n         */\n        const fetchCategories = async function() {\n            let categories = await http.request({\n                method: \"get\",\n                url: self.endpoints.API,\n                data: null\n            });\n\n            return await successHandler(categories);\n        };\n\n        /**\n         * Handler when 'fetchCategories' resolved successfully.\n         *\n         * @param response\n         * @returns {{}}\n         */\n        const successHandler = async function(response) {\n            if(response.status === 200) {\n                let decryptedCategories = api.decryptResponseObjects(response.data);\n\n                let categories = createCategoriesFromFactory(decryptedCategories);\n\n                await self.store.dispatch(\"user/setCategories\", categories);\n            }\n\n            return response;\n        };\n\n        const createCategoriesFromFactory = function(categories) {\n            let formatted = [];\n\n            categories.forEach(category => {\n                let categoryObject = {\n                    id: category.id,\n                    data: category.data,\n                    vault_id: category.vault_id\n                };\n\n                categoryObject = new Factory().create(\"category\", categoryObject);\n\n                formatted.push(categoryObject.dto());\n            });\n\n            return formatted;\n        };\n\n        return await init();\n    },\n\n    /**\n     * The main method to create an encrypted category.\n     *\n     * @param values\n     * @param vaultId\n     * @returns {Promise<AxiosResponse<any>|*>}\n     */\n    async create(values, vaultId) {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @param values\n         * @param vaultId\n         * @returns {Promise<AxiosResponse<*>|*>}\n         */\n        const init = async function(values, vaultId) {\n            try {\n                return await createCategory(values, vaultId);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Makes the request to create a category.\n         *\n         * @param values\n         * @param vaultId\n         * @returns {Promise<AxiosResponse<any>>}\n         */\n        const createCategory = async function(values, vaultId) {\n            let response = await http.request({\n                method: \"post\",\n                url: self.endpoints.CREATE(),\n                data: {\n                    data: values,\n                    vaultId: vaultId\n                }\n            });\n\n            return await successHandler(response);\n        };\n\n        const successHandler = async function(response) {\n            if(response.status === 201) {\n                let decryptedCategory = api.decryptResponseObject(response.data);\n                let categoryObject = {\n                    id: decryptedCategory.id,\n                    data: decryptedCategory.data,\n                    vault_id: response.data.vault_id\n                };\n\n                let category = self.createCategoryFromFactory(categoryObject);\n\n                await self.store.dispatch(\"user/addCategory\", category);\n            }\n\n            return response;\n        };\n\n        return await init(values, vaultId);\n    },\n\n    /**\n     * The main method to delete a category.\n     *\n     * @param id\n     * @returns {Promise<AxiosResponse<*>|*>}\n     */\n    async delete(id) {\n        let self = this;\n\n        /**\n         * Initializes the process.\n         *\n         * @param id\n         * @returns {Promise<AxiosResponse<*>|*>}\n         */\n        const init = async function(id) {\n            try {\n                return await deleteCategory(id);\n            } catch (error) {\n                return error;\n            }\n        };\n\n        /**\n         * Makes the request to delete a category.\n         *\n         * @param id\n         * @returns {Promise<AxiosResponse<any>>}\n         */\n        const deleteCategory = async function(id) {\n            let url = self.endpoints.DELETE(id);\n\n            let response = await http.request({\n                method: \"delete\",\n                url: url,\n                data: JSON.stringify({})\n            });\n\n            return await successHandler(response, id);\n        };\n\n        const successHandler = async function(response, id) {\n            if(response.status === 204) {\n                await self.store.dispatch(\"user/deleteCategory\", id);\n\n                let items = self.store.getters[\"user/getItems\"].filter(item => item.category == id);\n\n                for (const item of items) {\n                    await self.store.dispatch(\"user/deleteItem\", item.id);\n                }\n            }\n\n            return response;\n        };\n\n        return await init(id);\n    },\n\n    createCategoryFromFactory(item) {\n        let formatted = new Factory().create(\"category\", item);\n\n        return formatted.dto();\n    },\n\n    /**\n     * Encrypts given vault data; used when creating and updating.\n     *\n     * @param data\n     * @returns {string}\n     */\n    encryptCategory(data) {\n        data = JSON.stringify(data);\n\n        return this.security.encrypt(data, this.store.getters[\"user/getEncryptionKey\"]);\n    }\n}\n"],"mappings":"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"}]}